<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-time Speech Recognition Highlighting</title>
</head>
<body>
<div id="content">
    <p id="text">마이크 테스트 중입니다</p>
</div>
<button id="btn">Start Recognition</button>

<script src="https://cdn.jsdelivr.net/npm/mustache@4.2.0/mustache.min.js"></script>
<script>
    const uploadURL = "http://127.0.0.1:5000/upload"
    const btn = document.getElementById('btn');

    btn.addEventListener('click', () => {

        if (!navigator.mediaDevices) {
            console.error("getUserMedia not supported.")
            return;
        }

        const constraints = { audio: true };

        navigator.mediaDevices.getUserMedia(constraints)
                .then(function(stream) {
                    let chunks = []
                    let recorder = new MediaRecorder(stream);
                    recorder.ondataavailable = event => {
                        // Collect all the chunks of the recording in an array.
                        chunks.push(event.data);
                    };
                    recorder.onstop = event => {
                        console.log("Recording stopped.")
                        // Create a blob with all the chunks of the recording.
                        let blob = new Blob(chunks, { type: recorder.mimeType });
                        chunks = [];
                        btn.disabled = false;

                        // Create form data that contain the recording.
                        let formData = new FormData();
                        formData.append("audio_file", blob);

                        // Send the form data to the server.
                        fetch(uploadURL, {
                            method: "POST",
                            cache: "no-cache",
                            body: formData
                        }).then(resp => {
                            if (resp.status === 200) {
                                window.location.reload(true);
                            } else {
                                console.error("Error:", resp)
                            }
                        }).catch(err => {
                            console.error(err);
                        });
                    };
                    recorder.onstart = event => {
                        console.log("Recording started.");
                        btn.disabled = true;
                        // Stop recording when the time is up.
                        setTimeout(function() { recorder.stop(); }, 5000);
                    };
                    recorder.start();
                })
                .catch(function(err) {
                    console.error(err);
                });
    });
</script>
</body>
</html>
